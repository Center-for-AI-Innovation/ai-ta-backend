services:
  redis:
    image: redis:7.2
    restart: unless-stopped
    container_name: redis
    command: redis-server --requirepass ${INGEST_REDIS_PASSWORD}
    ports:
      - 6379:6379
    networks:
      - my-network
    volumes:
      - redis-data:/data
    
  qdrant:
    image: qdrant/qdrant:v1.9.5
    restart: unless-stopped
    container_name: qdrant
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - ./qdrant_data:/qdrant/storage
      - ./qdrant_config.yaml:/qdrant/config/production.yaml # Mount the config file directly as a volume
    networks:
      - my-network
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "-H",
          "Authorization: Bearer qd-SbvSWrYpa473J33yPjdL",
          "http://localhost:6333/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    restart: unless-stopped
    container_name: minio
    # Customize env vars in .env file
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server /data
    ports:
      - 9000:9000 # API access
      - 9001:9001 # Console access
    # expose:
    #   - 9000
    #   - 9001
    networks:
      - my-network
    volumes:
      - minio-data:/data

  flask-app:
    build: . # Directory with Dockerfile for Flask app
    # image: kastanday/ai-ta-backend:gunicorn
    restart: unless-stopped
    container_name: flask-app
    ports:
      - "${FLASK_PORT}:8000"
    expose:
      - "${FLASK_PORT}"
    volumes:
      - ./db:/usr/src/app/db # Mount local directory to store SQLite database
    networks:
      - my-network
      - supabase_default # Add connection to Supabase network
    depends_on:
      - qdrant
      - redis
      - minio
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 10

  ingest-worker:
    build: . # Use the same build context as the Flask app
    command: python ai_ta_backend/redis_queue/worker.py
    restart: unless-stopped
    container_name: ingest-worker
    networks:
      - my-network
    depends_on:
      - redis
    env_file:
      - .env

  crawlee:
    build: ./ic_crawlee
    container_name: crawlee
    networks:
      - my-network
    volumes:
      - ./data:/data
    ports:
      - "3345:3345"

# declare the network resource
# this will allow you to use service discovery and address a container by its name from within the network
networks:
  my-network: {}
  supabase_default:
    external: true # Mark as external since it's managed by Supabase

volumes:
  redis-data: {}
  qdrant-data: {}
  minio-data: {}